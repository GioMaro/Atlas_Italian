spring:
  datasource:
    # url: jdbc:h2:mem:test_db;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    url: jdbc:postgresql://${DB_URL}
    username: ${DB_USER}
    password: ${DB_PWD}
    driver-class-name: org.postgresql.Driver
  #    init:
  #      data-locations: classpath:data-preprod.sql
  #    tomcat:
  #      max-wait: 20000
  #      max-active: 50
  #      max-idle: 20
  #      min-idle: 15
  jackson:
    serialization:
      fail-on-empty-beans: false
  liquibase:
    change-log: classpath:/db/master.xml
    enabled: true
  messages:
    encoding: UTF-8
  servlet:
    multipart:
      max-request-size: 7MB
      max-file-size: 7MB
  profiles:
    active: dev,sso
  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher
  jpa:
    hibernate:
      ddl-auto: validate
    properties:
      hibernate:
        enable_lazy_load_no_trans: true
        format_sql: true
        dialect: org.hibernate.dialect.PostgreSQLDialect
        id:
          new_generator_mappings: false
    defer-datasource-initialization: false
    properties.mail.smtp:
      auth: true
      starttls.enable: true
      ssl.trust: smtp.gmail.com
  sql:
    init:
      mode: always

  mail:
    host: smtp.gmail.com
    port: 587
    username: ${SMTP_USER:}
    password: ${SMTP_PWD:}
    protocol: smtp
    tls: true
    properties.mail.smtp:
      auth: true
      starttls.enable: true
      ssl.trust: smtp.gmail.com
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${OAUTH2_GOOGLE_CLIENT_ID:}
            client-secret: ${OAUTH2_GOOGLE_CLIENT_SECRET:}
            redirect-uri: "{baseUrl}/oauth2/callback/{registrationId}"
            scope:
              - email
              - profile
#          microsoft:
#            client-id: ${OAUTH2_MICROSOFT_CLIENT_ID:}
#            client-secret: ${OAUTH2_MICROSOFT_CLIENT_SECRET:}
#            redirect-uri: "{baseUrl}/oauth2/callback/{registrationId}"
#            scope:
#              - email
#              - profile
#              - openid
#            client-authentication-method: post
#            authorization-grant-type: authorization_code
#          github:
#            client-id: ${OAUTH2_GITHUB_CLIENT_ID:}
#            client-secret: ${OAUTH2_GITHUB_CLIENT_SECRET:}
#            redirect-uri: "{baseUrl}/oauth2/callback/{registrationId}"
#            scope:
#              - user:email
#              - read:user
#        provider:
#          microsoft:
#            authorization-uri: https://login.microsoftonline.com/common/oauth2/v2.0/authorize
#            token-uri: https://login.microsoftonline.com/common/oauth2/v2.0/token
#            jwk-set-uri: https://login.microsoftonline.com/common/discovery/v2.0/keys
#            user-info-uri: https://graph.microsoft.com/oidc/userinfo
#            user-name-attribute: email
server:
  port: 8080 # This is the default port anyway, but you can change it here

security:
  jwt:
    token:
      secret-key: ${JWT_SECRET_KEY}
      expire-length: 1209600000 # 1000*60*60*24*14
  invitation-via-email: ${INVITATION_VIA_EMAIL}
frontend:
  url: ${PUBLIC_FRONT_URL}
mail:
  recipients: ${MAIL_RECIPIENTS}
  enable: ${ENABLE_EMAIL_NOTIFICATIONS}
superAdmin:
  role:
    name: SuperAdministratorGrash@p;l
fast-spring:
  username: ${FASTSPRING_USER}
  password: ${FASTSPRING_PWD}
management:
  health:
    mail:
      enabled: true
api:
  host: ${PUBLIC_API_URL}
storage:
  type: ${STORAGE_TYPE}
  minio:
    endpoint: ${MINIO_ENDPOINT:}
    bucket: ${MINIO_BUCKET:}
    access-key: ${MINIO_ACCESS_KEY:}
    secret-key: ${MINIO_SECRET_KEY:}
    public-endpoint: ${PUBLIC_MINIO_ENDPOINT:}
  gcp:
    project-id: ${GCP_PROJECT_ID:}
    bucket-name: ${GCP_BUCKET_NAME:}
    value: ${GCP_JSON:}
    json-path: ${GCP_JSON_PATH:}

allowed-organization-admins: ${ALLOWED_ORGANIZATION_ADMINS:}
cloud-version: ${CLOUD_VERSION:false}

# SSO Configuration
sso:
  enabled: ${SSO_ENABLED:false}
  providers: ${SSO_PROVIDERS:google,microsoft,github}

# Application OAuth2 Configuration
app:
  oauth2:
    # Redirect URLs after successful/failed authentication
    success-redirect-url: ${OAUTH2_SUCCESS_REDIRECT_URL:http://localhost:3000/oauth2/success}
    failure-redirect-url: ${OAUTH2_FAILURE_REDIRECT_URL:http://localhost:3000/oauth2/failure}
    # List of authorized redirect URIs
    authorized-redirect-uris:
      - ${OAUTH2_AUTHORIZED_REDIRECT_URI:http://localhost:3000/oauth2/success}
